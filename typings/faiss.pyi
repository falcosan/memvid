"""Type stubs for faiss library"""
import numpy as np
from typing import Optional, Tuple, Any

class Index:
    """Base FAISS index class"""
    def train(self, x: np.ndarray, numeric_type: int = 0) -> None: ...
    def add(self, x: np.ndarray, numeric_type: int = 0) -> None: ...
    def search(
        self,
        x: np.ndarray,
        k: int,
        params: Optional[Any] = None,
        D: Optional[np.ndarray] = None,
        I: Optional[np.ndarray] = None,
        numeric_type: int = 0
    ) -> Tuple[np.ndarray, np.ndarray]: ...
    @property
    def is_trained(self) -> bool: ...
    @property
    def ntotal(self) -> int: ...
    @property
    def d(self) -> int: ...

class IndexFlatL2(Index):
    """FAISS Flat L2 index"""
    def __init__(self, d: int) -> None: ...

class IndexIVFFlat(Index):
    """FAISS IVF Flat index"""
    def __init__(self, quantizer: Index, d: int, nlist: int) -> None: ...
    @property
    def nlist(self) -> int: ...
    @property
    def nprobe(self) -> int: ...
    @nprobe.setter
    def nprobe(self, value: int) -> None: ...
    @property
    def index(self) -> Index: ...

class IndexIDMap(Index):
    """FAISS Index with ID mapping"""
    def __init__(self, index: Index) -> None: ...
    def add_with_ids(
        self,
        x: np.ndarray,
        xids: np.ndarray,
        numeric_type: int = 0
    ) -> None: ...
    @property
    def index(self) -> Index: ...

def write_index(index: Index, fname: str) -> None: ...
def read_index(fname: str) -> Index: ...
